shadows = ['H','K','L','M','C5','K4','K5']

rule all:
    input:
        expand('results/elim_order/{shadow}.order', shadow=shadows),
        expand('results/td_images/processed_{shadow}.pdf', shadow=shadows),
        expand('results/td_images/unprocessed_{shadow}.pdf', shadow=shadows),
        expand('results/colored_dbn/colored_dbn_{shadow}.pdf',shadow=shadows),
        expand('results/compact_td_images/compact_{shadow}.pdf',shadow=shadows), # that's the future
        expand('results/compact_td_images/compact_{shadow}_letters.pdf',shadow=shadows), # that's the future
#        expand('results/compact_td_images/compact_{shadow}_equations.pdf',shadow=shadows), # that's the future
        expand('results/latex_equations/{shadow}_latex_equations.pdf',shadow=shadows), # that's the future
        expand('results/concatenations/concatenation_{shadow}.pdf',shadow=shadows)


rule pdflatex_equations:
    input:
        'results/latex_equations/{shadow}_latex_equations.tex'
    output:
        'results/latex_equations/{shadow}_latex_equations.pdf'
    shell:
        'pdflatex -output-directory=results/latex_equations/ {input}'

rule produce_latex_equations:
    input:
        tdname='results/processed_td_files/processed_{family}.td',
        helix='results/helix_annotations/{family}.helix'
    output:
        'results/latex_equations/{family}_latex_equations.tex'
    wildcard_constraints:
        family='[A-Z]*[0-9]*'
    script:
        'scripts/produce_latex_equations.py' 

rule extremities_label:
    input:
        tdname='results/processed_td_files/processed_{family}.td',
        helix='results/helix_annotations/{family}.helix'
    output:
        'results/json_files/extremities_label_{family}.json'
    run:
        from scripts.utils import equations_prep_work
        root = open(input.tdname).readlines()[0].split(' ')[1].rstrip('\n')
            
        _, _, _, _, _, extremities_label, _, _, _, _ = equations_prep_work(input.tdname, input.helix, root) 

        import json
        with open(output[0],'w') as f:
            json.dump(extremities_label, f)

rule concatenation:
    input:
        colored_dbn='results/colored_dbn/colored_dbn_{shadow}.pdf',
        colored_td='results/td_images/processed_{shadow}.pdf',
        compact_td='results/compact_td_images/compact_{shadow}.pdf',
        dp_eq='results/latex_equations/{shadow}_latex_equations.pdf',
    output:
        'results/concatenations/concatenation_{shadow}.pdf'
    shell:
        'pdftk {input.colored_dbn} {input.colored_td} {input.compact_td} {input.dp_eq} cat output {output}'

rule extract_compact_tree:
    input:
        tdname='results/processed_td_files/processed_{family}.td',
        helix='results/helix_annotations/{family}.helix'
    output:
        'results/compact_dot_files/compact_{family}.dot'
    wildcard_constraints:
        family='[A-Z]*[0-9]*'
    script:
        'scripts/compact_tree_extraction.py'

rule compact_dottopdf:
    input:
        'results/compact_dot_files/{file}.dot'
    output:
        'results/compact_td_images/{file}.pdf'
    shell:
        'dot -Tpdf -o {output} {input}' 

rule extract_compact_tree_letters:
    input:
        tdname='results/processed_td_files/processed_{family}.td',
        helix='results/helix_annotations/{family}.helix'
    output:
        'results/compact_dot_files/compact_{family}_letters.dot'
    script:
        'scripts/compact_tree_extraction_letters.py'

rule extract_tree_equations:
    input:
        tdname='results/processed_td_files/processed_{family}.td',
        helix='results/helix_annotations/{family}.helix'
    output:
        'results/compact_dot_files/compact_{family}_equations.dot'
    script:
        'scripts/compact_tree_extraction_equations.py'

rule extract_processed_elimination_ordering:
    input:
        'results/processed_td_files/processed_{shadow}.td'
    output:
        'results/processed_elim_order/processed_{shadow}.order'
    script:
        'scripts/td_to_elim.py'

rule extract_elimination_ordering:
    input:
        'results/td_files/{shadow}.td'
    output:
        'results/elim_order/{shadow}.order'
    script:
        'scripts/td_to_elim.py'

rule compute_td:
    input:
        'results/gr_files/{shadow}.gr'
    output:
        'results/td_files/{shadow}.td'
    shell:
        'java -Xmx3g -Xms3g -Xss10m -Duser.dir=workflow/scripts/PACE2017-TrackA tw.exact.MainDecomposer < {input} > {output}'

rule extract_gr:
    input:
        'resources/dbn_files/{shadow}.dbn'
    output:
        'results/gr_files/{shadow}.gr' 
    script:
        "scripts/dbn_to_gr.py"

rule extract_helices:
    input:
        'resources/dbn_files/{shadow}.dbn'
    output:
        'results/helix_annotations/{shadow}.helix'
    script:
        "scripts/annotate_helices.py"

rule process_helices:
    input:
        graph='results/gr_files/{shadow}.gr',
        tdname='results/td_files/{shadow}.td',
        helix='results/helix_annotations/{shadow}.helix'
    output:
        'results/processed_td_files/processed_{shadow}.td'
    log:
        'results/processed_td_files/exec_logs/{shadow}_processing.log'
    script:
        "scripts/process_helices.py"

rule make_dot_file:
    input:
        dbn='resources/dbn_files/{family}.dbn',
        tdname='results/processed_td_files/processed_{family}.td',
        helix='results/helix_annotations/{family}.helix'
    output:
        'results/dot_files/processed_{family}.dot' 
    script:
        "scripts/make_dot_file.py"

rule from_td_to_dot:
    input:
        'results/td_files/{shadow}.td'
    output:
        'results/dot_files/unprocessed_{shadow}.td1.dot'
    script:
        'scripts/from_pace_td_to_td1dot.py'

rule unprocessed_td:
    input:
        'results/dot_files/unprocessed_{shadow}.td1.dot'
    output:
        'results/td_images/unprocessed_{shadow}.pdf'
    shell:
        'dot -Tpdf -o {output} {input}' 

rule dot_process:
    input:
        'results/dot_files/processed_{family}.dot' 
    output:
        'results/td_images/processed_{family}.pdf'
    shell:
        'dot -Tpdf -o {output} {input}' 

rule colored_dbn:
    input:
        dbn='resources/dbn_files/{family}.dbn',
        helix='results/helix_annotations/{family}.helix',
        extremities_label='results/json_files/extremities_label_{family}.json'
    output:
        'results/colored_dbn/colored_dbn_{family}.tex'
    script:
        'scripts/colored_dbn.py'

rule textopdf:
    input:
        'results/colored_dbn/colored_dbn_{family}.tex'
    output:
        'results/colored_dbn/colored_dbn_{family}.pdf'
    shell:
        'pdflatex -output-directory=results/colored_dbn/ {input}'

rule pdftops:
    input:
        'results/colored_dbn/colored_dbn_{family}.pdf'
    output:
        'results/colored_dbn/colored_dbn_{family}.ps'
    shell:
        'pdf2ps {input} {output}'
